<Window x:Class="Optimate.ScriptWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        x:Name="MainScriptWindow"
       xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Optimate"
        xmlns:converters="clr-namespace:Optimate.Converters"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="OptiMate (v1.1)" Height="750" Width="1050" ResizeMode="NoResize"
    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">
    <Window.Resources>
        <converters:AvailableOperators x:Key="AvailableOperators"/>
        <converters:isMarginInternal x:Key="isMarginInternal"/>
        <converters:ShowRemoveInstructionButtonConverter x:Key="ShowRemoveInstructionButtonConverter"/>
        <converters:ValidNonEmptyParameterToColor x:Key="ValidNonEmptyParameterToColor"/>
        <converters:ValidIntegerParameterToColor x:Key="ValidIntegerParameterToColor"/>
        <converters:InstructionNumberConverter x:Key="InstructionNumberConverter"/>
        <converters:CropVisibilityConverter x:Key="CropVisibilityConverter"/>
        <converters:MarginVisibilityConverter x:Key="MarginVisibilityConverter"/>
        <converters:BoolToString x:Key="BoolToString"/>
        <converters:AddInstructionVisibilityConverter x:Key="AddInstructionVisibilityConverter"/>
        <converters:InstructionCommandParameterConverter x:Key="InstructionCommandParameterConverter"/>
        <converters:SortStructuresConverter x:Key="SortStructuresConverter"/>
        <converters:AvailableStructureConverter x:Key="AvailableStructureConverter"/>
        <converters:OperatorToTargetVisibility x:Key="OperatorToTargetVisibility"/>
        <converters:TargetStatusToColor x:Key="TargetStatusToColor"/>
        <converters:VisibilityConverter x:Key="VisibilityConverter"/>
        <converters:VisibilityInverseConverter x:Key="VisibilityInverseConverter"/>
        <converters:Color2Brush x:Key="Color2Brush"/>
        <converters:VisibilityMultiConverter x:Key="VisibilityMultiConverter"/>
        <ControlTemplate x:Key="ProgressBarNC" TargetType="{x:Type ProgressBar}">
            <Grid x:Name="TemplateRoot" SnapsToDevicePixels="True">
                <Rectangle Fill="AliceBlue" RadiusY="2" RadiusX="2"/>
                <Border CornerRadius="2" Margin="1">
                    <Border.Background>
                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                            <GradientStop Color="#50FFFFFF" Offset="0.5385"/>
                            <GradientStop Color="Transparent" Offset="0.5385"/>
                        </LinearGradientBrush>
                    </Border.Background>
                </Border>
                <Border BorderBrush="AliceBlue" BorderThickness="1,0,1,1" Margin="1">
                    <Border.Background>
                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                            <GradientStop Color="#80FFFFFF" Offset="0.05"/>
                            <!--<GradientStop Color="SteelBlue" Offset="0.05"/>-->
                            <GradientStop Color="Transparent" Offset="0.25"/>
                        </LinearGradientBrush>
                    </Border.Background>
                </Border>
                <Rectangle x:Name="PART_Track" Margin="1"/>
                <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="1">
                    <Grid x:Name="Foreground">
                        <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
                        <Grid x:Name="Animation" ClipToBounds="True">
                            <Rectangle x:Name="GR" HorizontalAlignment="Left" Margin="-100,0,0,0" Width="100">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                        <GradientStop Color="Transparent" Offset="0"/>
                                        <GradientStop Color="LightSteelBlue" Offset="0.4"/>
                                        <GradientStop Color="LightSteelBlue" Offset="0.6"/>
                                        <GradientStop Color="Transparent" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <Grid x:Name="Overlay">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MaxWidth="15"/>
                                <ColumnDefinition Width="0.1*"/>
                                <ColumnDefinition MaxWidth="15"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Rectangle x:Name="LeftDark" Margin="1,1,0,1" RadiusY="1" RadiusX="1" Grid.RowSpan="2">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                        <GradientStop Color="#0C000000" Offset="0"/>
                                        <GradientStop Color="SteelBlue" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="RightDark" Grid.Column="2" Margin="0,1,1,1" RadiusY="1" RadiusX="1" Grid.RowSpan="2">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                        <GradientStop Color="SteelBlue" Offset="0"/>
                                        <GradientStop Color="SteelBlue" Offset="0.7"/>
                                        <!--<GradientStop Color="#0C000000" Offset="1"/>-->
                                        <GradientStop Color="SteelBlue" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="LeftLight" Grid.Column="0" Grid.Row="2">
                                <Rectangle.Fill>
                                    <RadialGradientBrush RadiusY="1" RadiusX="1">
                                        <RadialGradientBrush.RelativeTransform>
                                            <MatrixTransform Matrix="1,0,0,1,0.5,0.5"/>
                                        </RadialGradientBrush.RelativeTransform>
                                        <!--<GradientStop Color="#60FFFFC4" Offset="0"/>
                                        <GradientStop Color="#00FFFFC4" Offset="1"/>-->
                                        <GradientStop Color="SteelBlue" Offset="0"/>
                                        <GradientStop Color="SteelBlue" Offset="1"/>
                                    </RadialGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="CenterLight" Grid.Column="1" Grid.Row="2">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                                        <GradientStop Color="#60FFFFC4" Offset="0"/>
                                        <GradientStop Color="#00FFFFC4" Offset="1"/>
                                        <!--<GradientStop Color="SteelBlue" Offset="0"/>
                                        <GradientStop Color="SteelBlue" Offset="1"/>-->
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="RightLight" Grid.Column="2" Grid.Row="2">
                                <Rectangle.Fill>
                                    <RadialGradientBrush RadiusY="1" RadiusX="1">
                                        <RadialGradientBrush.RelativeTransform>
                                            <MatrixTransform Matrix="1,0,0,1,-0.5,0.5"/>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Color="#60FFFFC4" Offset="0"/>
                                        <GradientStop Color="#00FFFFC4" Offset="1"/>
                                        <!--<GradientStop Color="SteelBlue" Offset="0"/>
                                        <GradientStop Color="SteelBlue" Offset="1"/>-->

                                    </RadialGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Border x:Name="Highlight1" Grid.ColumnSpan="3" Grid.RowSpan="2">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#90FFFFFF" Offset="0.5385"/>
                                        <!--<GradientStop Color="SteelBlue" Offset="0.5385"/>-->
                                        <GradientStop Color="Transparent" Offset="0.5385"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Border x:Name="Highlight2" Grid.ColumnSpan="3" Grid.RowSpan="2">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#80FFFFFF" Offset="0.05"/>
                                        <!--<GradientStop Color="SteelBlue" Offset="0.05"/>-->
                                        <GradientStop Color="Transparent" Offset="0.25"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </Grid>
                    </Grid>
                </Decorator>
                <Border BorderBrush="AliceBlue" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                        <Setter.Value>
                            <RotateTransform Angle="-90"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsIndeterminate" Value="True">
                    <Setter Property="Visibility" TargetName="LeftDark" Value="Collapsed"/>
                    <Setter Property="Visibility" TargetName="RightDark" Value="Collapsed"/>
                    <Setter Property="Visibility" TargetName="LeftLight" Value="Collapsed"/>
                    <Setter Property="Visibility" TargetName="CenterLight" Value="Collapsed"/>
                    <Setter Property="Visibility" TargetName="RightLight" Value="Collapsed"/>
                    <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsIndeterminate" Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard RepeatBehavior="Forever">
                                <ThicknessAnimationUsingKeyFrames BeginTime="0:0:0" Duration="0:0:2" Storyboard.TargetName="GR" Storyboard.TargetProperty="Margin">
                                    <ThicknessAnimationUsingKeyFrames.KeyFrames>
                                        <LinearThicknessKeyFrame KeyTime="0:0:0" Value="-100,0,0,0"/>
                                        <LinearThicknessKeyFrame KeyTime="0:0:1" Value="900,0,0,0"/>
                                        <LinearThicknessKeyFrame KeyTime="0:0:2" Value="-100,0,0,0"/>
                                    </ThicknessAnimationUsingKeyFrames.KeyFrames>
                                </ThicknessAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <SolidColorBrush x:Key="ListBorder" Color="#828790"/>
        <Style TargetType="ToolTip">
            <Style.Triggers>
                <Trigger Property="Content"
                 Value="{x:Static sys:String.Empty}">
                    <Setter Property="Visibility"
                    Value="Collapsed" />
                </Trigger>
                <Trigger Property="Content"
                 Value="{x:Null}">
                    <Setter Property="Visibility"
                    Value="Collapsed" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ComboBoxStyle1" TargetType="ComboBox">
            <Setter Property="Background" Value="AliceBlue"></Setter>
            <Setter Property="BorderBrush" Value="LightSteelBlue"></Setter>
            <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
            <Setter Property="Margin" Value="5,5,5,5"></Setter>
        </Style>
        <Style x:Key="ListBoxStyle1" TargetType="{x:Type ListBox}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBox}">
                        <Grid>
                            <Rectangle Fill="White" RadiusX="10" RadiusY="10" Opacity="0.195" />
                            <Border CornerRadius="10" x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="1" SnapsToDevicePixels="true">
                                <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}" Template="{DynamicResource ScrollViewerControlTemplate1}">
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </ScrollViewer>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="VerticalScrollBarBackground" EndPoint="1,0" StartPoint="0,0">
            <GradientStop Color="#E1E1E1" Offset="0"/>
            <GradientStop Color="#EDEDED" Offset="0.20"/>
            <GradientStop Color="#EDEDED" Offset="0.80"/>
            <GradientStop Color="#E3E3E3" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ScrollBarDisabledBackground" Color="#F4F4F4"/>
        <LinearGradientBrush x:Key="HorizontalScrollBarBackground" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#E1E1E1" Offset="0"/>
            <GradientStop Color="#EDEDED" Offset="0.20"/>
            <GradientStop Color="#EDEDED" Offset="0.80"/>
            <GradientStop Color="#E3E3E3" Offset="1"/>
        </LinearGradientBrush>
        <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Microsoft_Windows_Themes:ScrollChrome x:Name="Chrome" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" SnapsToDevicePixels="true" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="{TemplateBinding Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="CheckBoxFillNormal" Color="LightGoldenrodYellow"/>
        <SolidColorBrush x:Key="CheckBoxStroke" Color="CornflowerBlue"/>
        <Style x:Key="EmptyCheckBoxFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="CornflowerBlue" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="CheckRadioFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="CheckBoxStyle1" TargetType="{x:Type CheckBox}">
            <Setter Property="Foreground" Value="PaleGoldenrod"/>
            <Setter Property="Background" Value="PaleGoldenrod"/>
            <Setter Property="BorderBrush" Value="PaleGoldenrod"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                            <BulletDecorator.Bullet>
                                <Microsoft_Windows_Themes:BulletChrome BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" IsChecked="{TemplateBinding IsChecked}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}"/>
                            </BulletDecorator.Bullet>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="true">
                                <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                                <Setter Property="Padding" Value="4,0,0,0"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="PaleGoldenrod"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="TextBoxBorder" EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
            <GradientStop Color="#ABADB3" Offset="0.05"/>
            <GradientStop Color="#E2E3EA" Offset="0.07"/>
            <GradientStop Color="#E3E9EF" Offset="1"/>
        </LinearGradientBrush>
        <Style x:Key="TextBoxStyle1" BasedOn="{x:Null}" TargetType="{x:Type TextBox}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Microsoft_Windows_Themes:ListBoxChrome x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderFocused="{TemplateBinding IsKeyboardFocusWithin}" SnapsToDevicePixels="true">
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Microsoft_Windows_Themes:ListBoxChrome>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Rectangle Height="Auto" Width="8" Fill="AntiqueWhite" RadiusX="5" RadiusY="5" Margin="0,10,0,10">
                            <Rectangle.Effect>
                                <DropShadowEffect ShadowDepth="0" BlurRadius="10" Color="CornflowerBlue" />
                            </Rectangle.Effect>
                        </Rectangle>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarStyle1" TargetType="{x:Type ScrollBar}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
            <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <Border Width="1" Background="CornflowerBlue" HorizontalAlignment="Center" Margin="0,20,0,20"/>
                            <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource ScrollBarThumb}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="VerticalGripper"/>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="MinWidth" Value="0"/>
                    <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                    <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                    <Setter Property="Background" Value="{StaticResource HorizontalScrollBarBackground}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollBar}">
                                <Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                        <ColumnDefinition Width="0.00001*"/>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    </Grid.ColumnDefinitions>
                                    <RepeatButton Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="LeftArrow"/>
                                    <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}" ViewportSize="NaN">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb Style="{StaticResource ScrollBarThumb}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="HorizontalGripper"/>
                                        </Track.Thumb>
                                    </Track>
                                    <RepeatButton Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="RightArrow"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <ControlTemplate x:Key="ScrollViewerControlTemplate1" TargetType="{x:Type ScrollViewer}">
            <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="True" CanVerticallyScroll="True" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" />
                <ScrollBar x:Name="PART_VerticalScrollBar" Margin="3,0,3,0" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{DynamicResource ScrollBarStyle1}"/>
            </Grid>
        </ControlTemplate>
        <Style x:Key="DraggableListViewItemStyle" TargetType="ListViewItem">
            <Setter Property="Template">
                <Setter.Value>
                    <!-- Trun off default selection-->
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Grid Background="Transparent">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" 
                                Margin="0,2,2,2"
                                CornerRadius="5,5,5,5"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true">
                            </Border>
                            <ContentPresenter Name="CP" 
                                Margin="0,2,2,2"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!--<Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{Binding Path=DataContext.Color, RelativeSource={RelativeSource AncestorType=ListViewItem}, Converter={StaticResource Color2Brush}, UpdateSourceTrigger=PropertyChanged}"/>
                                <Setter TargetName="Bd" Property="Effect">
                                    <Setter.Value>
                                        <DropShadowEffect ShadowDepth="0.2" Color="{Binding Path=DataContext.Color, RelativeSource={RelativeSource AncestorType=ListViewItem}, Converter={StaticResource Color2Brush}, UpdateSourceTrigger=PropertyChanged}" Opacity="0.3" BlurRadius="1"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>-->
                            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                <Setter Property="Background" Value="AliceBlue"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <!--<MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorLevel=3, AncestorType=Grid}, Path=IsMouseOver}" Value="false"/>
                        <Condition Binding="{Binding ElementName=AutoPlanner, Path=DataContext.DragSelected}" Value="false"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="IsSelected" Value="false"></Setter>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding Path=Pinned, UpdateSourceTrigger=PropertyChanged}" Value="True">
                    <Setter Property="FontWeight" Value="Bold" />
                </DataTrigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="FontWeight" Value="Bold" />
                </Trigger>-->

            </Style.Triggers>
        </Style>
        <Style x:Key="ListViewStyle1" TargetType="{x:Type ListView}">
            <Setter Property="Background" Value="White"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <!--<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>-->
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListView}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                            <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--<Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="Black"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="true"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </MultiTrigger>-->
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="SquintProtocolListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
            <Setter Property="Foreground" Value="SteelBlue" />
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="2,3,0,3"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="LightSteelBlue"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle_Small" TargetType="Button">
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="0,0,0,0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Width" Value="20"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Name="border" BorderThickness="1" Padding="3,2" BorderBrush="Transparent" CornerRadius="3" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="CornFlowerBlue" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle_Medium" TargetType="Button">
            <Setter Property="BorderBrush" Value="CornflowerBlue"/>
            <Setter Property="Background" Value="PapayaWhip"/>
            <Setter Property="Padding" Value="0,0,0,0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Width" Value="30"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Name="border" BorderThickness="1" Padding="3,2" BorderBrush="Transparent" CornerRadius="5" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="CornFlowerBlue" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle_Highlight" TargetType="Button">
            <Setter Property="BorderBrush" Value="Orange"/>
            <Setter Property="Background" Value="FloralWhite"/>
            <Setter Property="Padding" Value="0,0,0,0"/>
            <Setter Property="BorderThickness" Value="3"/>
            <Setter Property="Height" Value="35"/>
            <Setter Property="Width" Value="35"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Name="border" BorderThickness="2" Padding="3,2" BorderBrush="Tomato" CornerRadius="5" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsEnabled" Value="True"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter TargetName="border" Property="BorderThickness" Value="2" />
                                </MultiTrigger.Setters>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard  Name="HighLightButtonSB" >
                                        <Storyboard Storyboard.TargetName="border" Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                                            <ColorAnimationUsingKeyFrames Duration="00:00:01" RepeatBehavior="Forever">
                                                <EasingColorKeyFrame KeyTime="0:00:00" Value="White"/>
                                                <EasingColorKeyFrame KeyTime="0:00:0.5" Value="PaleGreen"/>
                                                <EasingColorKeyFrame KeyTime="0:00:01" Value="White"/>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <StopStoryboard BeginStoryboardName="HighLightButtonSB"/>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderThickness" Value="4" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="OptiStructureComboBoxStyle" TargetType="ComboBox">
            <Setter Property="Background" Value="LightGoldenrodYellow"></Setter>
            <Setter Property="BorderBrush" Value="LightSteelBlue"></Setter>
            <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
            <Setter Property="MaxDropDownHeight" Value="400"></Setter>
            <Setter Property="Margin" Value="0,0,0,0"></Setter>
        </Style>
        <!--<Style TargetType="{x:Type ComboBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBoxItem">
                        <Border x:Name="ItemBorder" Padding="2,0"  BorderThickness="1"  CornerRadius="3">
                            <ContentPresenter />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->
        <ControlTemplate x:Key="OptiComboBoxControlTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                    <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                        <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Microsoft_Windows_Themes:SystemDropShadowChrome>
                </Popup>
                <ToggleButton BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                            <Setter Property="IsTabStop" Value="False"/>
                            <Setter Property="Focusable" Value="False"/>
                            <Setter Property="ClickMode" Value="Press"/>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Microsoft_Windows_Themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" SnapsToDevicePixels="True">
                                            <Grid HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                <Path x:Name="Arrow" Data="M0,0L3.5,4 7,0z" Fill="Black" HorizontalAlignment="Center" Margin="3,1,0,0" VerticalAlignment="Center"/>
                                            </Grid>
                                        </Microsoft_Windows_Themes:ButtonChrome>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter Property="RenderPressed" TargetName="Chrome" Value="True"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
                <ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                    <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="False">
                    <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    <Setter Property="Background" Value="#FFF4F4F4"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="True"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                </MultiTrigger>
                <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Window.Resources>
    <Window.DataContext>
        <local:ViewModel/>
    </Window.DataContext>
    <Grid KeyDown="KeyDown">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Margin="20,0,0,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <StackPanel Grid.Row="0" Orientation="Horizontal" >
                <TextBlock Text="Current structure set: " FontSize="16" Margin="5,10,0,10"/>
                <TextBlock Text="{Binding CurrentStructureSet, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" FontWeight="Bold"
                           VerticalAlignment="Center" FontSize="16" Foreground="SteelBlue" Margin="10,0,0,0"/>
            </StackPanel>
            <Border Grid.Row="1" Background="Black" Height="2" HorizontalAlignment="Stretch" Margin="0,5,20,10"/>
        </Grid>
        <Grid Grid.Row="1" Margin="20,0,20,0" VerticalAlignment="Stretch">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Border Grid.Row="0" CornerRadius="5,5,5,5" Background="CornflowerBlue" HorizontalAlignment="Stretch" Height="25">
                    <TextBlock Text="Template selection" Margin="10,0,0,0"  Foreground="White" FontSize="14" FontWeight="Bold" VerticalAlignment="Center"/>
                </Border>
                <Grid Grid.Row="1" Margin="5,5,0,10" Height="50">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Text="Select template:" FontSize="14" FontWeight="Black" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,6,0,6"/>
                    <ComboBox  Grid.Column="1" Margin="5,4,0,4" VerticalAlignment="Center" HorizontalAlignment="Stretch" MinWidth="200" FontSize="14"
                        Style="{DynamicResource OptiStructureComboBoxStyle}"
                        Template="{DynamicResource OptiComboBoxControlTemplate}"
                        ItemsSource="{Binding Protocols, UpdateSourceTrigger=PropertyChanged}"  DisplayMemberPath="ProtocolDisplayName"
                        SelectedItem="{Binding SelectedProtocol, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding CanLoadTemplates, UpdateSourceTrigger=PropertyChanged}">
                    </ComboBox>
                    

                    <!--<ComboBox  Grid.Column="1" Margin="5,4,0,4" VerticalAlignment="Center" HorizontalAlignment="Stretch" MinWidth="200" FontSize="14">


                    </ComboBox>-->
                    <!--<Border Grid.Column="2" Margin="10,0,0,0" CornerRadius="5,5,5,5" Background="PapayaWhip" Height="30" HorizontalAlignment="Right">-->
                    <Button Grid.Column="2" Margin="10,0,0,0" HorizontalAlignment="Right" Style="{StaticResource ButtonStyle_Medium}" Command="{Binding ReloadTemplateCommand}" Width="Auto" IsEnabled="{Binding CanLoadTemplates, UpdateSourceTrigger=PropertyChanged}">
                        <TextBlock Text="Reload Templates" FontSize="16" FontWeight="bold" Margin="5,0,5,0"/>
                    </Button>
                    <!--</Border>-->
                    <Border Grid.Column="3" CornerRadius="5,5,5,5" Background="PapayaWhip" Height="30" HorizontalAlignment="Right" Margin="10,0,20,0">
                        <Button Style="{StaticResource ButtonStyle_Medium}" Width="Auto" Command="{Binding OpenTemplateFolderCommand}" IsEnabled="{Binding CanLoadTemplates, UpdateSourceTrigger=PropertyChanged}">
                            <TextBlock Text="Open template folder" FontSize="16" FontWeight="bold" Margin="5,0,5,0"/>
                        </Button>
                    </Border>

                </Grid>
                <Grid Grid.Row="2" Visibility="{Binding ProtocolVisibility, UpdateSourceTrigger=PropertyChanged}" Height="25" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="170"/>
                        <ColumnDefinition Width="150"/>
                        <ColumnDefinition Width="140"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Border Grid.Column="0" CornerRadius="5" Background="CornflowerBlue">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Text="Auto Structure" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" FontSize="12" VerticalAlignment="Center"/>
                            <Button Grid.Column="1" Style="{StaticResource ButtonStyle_Small}" Command="{Binding AddStructureCommand}" Background="PapayaWhip" ToolTip="Add new structure" VerticalAlignment="Center" Margin="0,0,5,0">
                                <Button.CommandParameter>
                                    <MultiBinding Converter="{StaticResource InstructionCommandParameterConverter}">
                                        <Binding/>
                                        <Binding Path="DataContext">
                                            <Binding.RelativeSource>
                                                <RelativeSource Mode="FindAncestor" AncestorType="ListViewItem" AncestorLevel="2"/>
                                            </Binding.RelativeSource>
                                        </Binding>
                                    </MultiBinding>
                                </Button.CommandParameter>
                                <Image Source="Resources/plus_black.png" Stretch="Fill" />
                            </Button>
                        </Grid>
                    </Border>
                    <Border Grid.Column="1" CornerRadius="5" Background="CornflowerBlue" Margin="5,0,5,0">
                        <TextBlock Text="Operator" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <Border Grid.Column="2" CornerRadius="5" Background="CornflowerBlue" Margin="5,0,5,0">
                        <TextBlock Text="Target" Foreground="White"  FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <Border Grid.Column="3" CornerRadius="5" Background="CornflowerBlue" Margin="5,0,5,0">
                        <TextBlock Text="Instruction Options" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </Grid>
                <Grid Grid.Row="3" Visibility="{Binding ProtocolVisibility, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,0">
                    <ScrollViewer Margin="0,10,0,0" Focusable="true" VerticalAlignment="Stretch" VerticalScrollBarVisibility="Auto" PreviewMouseWheel="ScrollViewer_PreviewMouseWheel"
                              Template="{DynamicResource ScrollViewerControlTemplate1}" CanContentScroll="True" Background="Transparent" Visibility="{Binding ProtocolVisibility, UpdateSourceTrigger=PropertyChanged}">
                        <ListView Style="{StaticResource ListViewStyle1}" ItemContainerStyle="{StaticResource DraggableListViewItemStyle}" AlternationCount="2" 
                          ItemsSource="{Binding ProtocolStructures, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding CanLoadTemplates, UpdateSourceTrigger=PropertyChanged}" SelectionChanged="ListView_SelectionChanged" >
                            <ListView.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid Grid.Column="0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="160"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid Grid.Column="0">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="*" MinHeight="50"/>
                                                </Grid.RowDefinitions>
                                                <Grid Grid.Row="0">
                                                    <Button Style="{StaticResource ButtonStyle_Small}" Command="{Binding DataContext.RemoveAutoStructureCommand, ElementName=MainScriptWindow}" ToolTip="Remove structure"
                                                                         HorizontalAlignment="Left" CommandParameter="{Binding}" VerticalAlignment="Center" Margin="3,5,0,0">
                                                        <Image Source="Resources/x.png" Stretch="Fill" />
                                                    </Button>
                                                </Grid>
                                                <Grid Grid.Row="1" Margin="10,-10,0,0">
                                                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
                                                        <StackPanel Orientation="Horizontal">
                                                            <TextBlock Text="{Binding StructureId}" HorizontalAlignment="Center" FontWeight="bold" FontSize="14" VerticalAlignment="Bottom" Margin="5,0,0,0"
                                                       Visibility="{Binding isNew, Converter={StaticResource VisibilityInverseConverter}}"/>
                                                            <TextBox Text="{Binding StructureId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Padding="1,1,1,1" HorizontalAlignment="Center" FontWeight="bold" FontSize="14" VerticalAlignment="Bottom" MinWidth="100" MaxWidth="150"
                                                       Visibility="{Binding isNew, Converter={StaticResource VisibilityConverter}}"/>
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,5,0,0">
                                                            <TextBlock Text="High Resolution" FontSize="10" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                                                            <CheckBox FontSize="10" Style="{StaticResource CheckBoxStyle1}" HorizontalAlignment="Left" Margin="5,0,0,0"
                                                          IsChecked="{Binding isHighResolution, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                                      ToolTip="Toggles high resolution. If any of the operator targets are HR then this option will be ignored to allow the operation and the resulting structure will be HR."/>
                                                        </StackPanel>
                                                    </StackPanel>
                                                </Grid>




                                            </Grid>
                                        </Grid>
                                        <Grid Grid.Column="1" >
                                            <ListView Style="{StaticResource ListViewStyle1}" ItemContainerStyle="{StaticResource DraggableListViewItemStyle}" 
                                                      ItemsSource="{Binding Instruction, UpdateSourceTrigger=PropertyChanged}" Background="Transparent" HorizontalAlignment="Left">
                                                <ListView.ItemTemplate>
                                                    <DataTemplate>
                                                        <Grid Background="Transparent" Margin="10,3,0,3">
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="140"/>
                                                                <ColumnDefinition Width="150"/>
                                                                <ColumnDefinition Width="*"/>
                                                            </Grid.ColumnDefinitions>
                                                            <Grid Grid.Column="0" >
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="*"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                </Grid.ColumnDefinitions>
                                                                <TextBlock Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                                    <TextBlock.Text>
                                                                        <MultiBinding Converter="{StaticResource InstructionNumberConverter}">
                                                                            <Binding/>
                                                                            <Binding Path="DataContext.ProtocolStructure.Instruction">
                                                                                <Binding.RelativeSource>
                                                                                    <RelativeSource Mode="FindAncestor" AncestorType="ListView" />
                                                                                </Binding.RelativeSource>
                                                                            </Binding>
                                                                        </MultiBinding>
                                                                    </TextBlock.Text>
                                                                </TextBlock>
                                                                <ComboBox Grid.Column="1" SelectedItem="{Binding Operator, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource OptiStructureComboBoxStyle}"
                                                                         Template="{DynamicResource OptiComboBoxControlTemplate}"
                                                                          HorizontalAlignment="Center" VerticalAlignment="Center">
                                                                    <ComboBox.ItemsSource>
                                                                        <MultiBinding Converter="{StaticResource AvailableOperators}">
                                                                            <Binding Path="DataContext.Operators" ElementName="MainScriptWindow" UpdateSourceTrigger="PropertyChanged" />
                                                                            <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorLevel=2, AncestorType=ListViewItem}" UpdateSourceTrigger="PropertyChanged" />
                                                                            <Binding/>
                                                                        </MultiBinding>
                                                                    </ComboBox.ItemsSource>
                                                                </ComboBox>
                                                                <Button Grid.Column="3" Style="{StaticResource ButtonStyle_Small}" Command="{Binding DataContext.AddInstructionCommand, ElementName=MainScriptWindow}" ToolTip="Add new instruction following"
                                                                         HorizontalAlignment="Right"  Margin="0,0,0,0">
                                                                    <Button.CommandParameter>
                                                                        <MultiBinding Converter="{StaticResource InstructionCommandParameterConverter}">
                                                                            <Binding/>
                                                                            <Binding Path="DataContext">
                                                                                <Binding.RelativeSource>
                                                                                    <RelativeSource Mode="FindAncestor" AncestorType="ListViewItem" AncestorLevel="2"/>
                                                                                </Binding.RelativeSource>
                                                                            </Binding>
                                                                        </MultiBinding>
                                                                    </Button.CommandParameter>
                                                                    <TextBlock Text="..." />
                                                                </Button>
                                                                <Button Grid.Column="2" Style="{StaticResource ButtonStyle_Small}" Command="{Binding DataContext.RemoveInstructionCommand, ElementName=MainScriptWindow}" ToolTip="Remove instruction"
                                                                         HorizontalAlignment="Right">
                                                                    <Button.Visibility>
                                                                        <Binding Converter="{StaticResource ShowRemoveInstructionButtonConverter}" Path="DataContext" RelativeSource="{RelativeSource AncestorLevel=2, AncestorType=ListViewItem}"/>
                                                                    </Button.Visibility>
                                                                    <Button.CommandParameter>
                                                                        <MultiBinding Converter="{StaticResource InstructionCommandParameterConverter}">
                                                                            <Binding/>
                                                                            <Binding Path="DataContext">
                                                                                <Binding.RelativeSource>
                                                                                    <RelativeSource Mode="FindAncestor" AncestorType="ListViewItem" AncestorLevel="2"/>
                                                                                </Binding.RelativeSource>
                                                                            </Binding>
                                                                        </MultiBinding>
                                                                    </Button.CommandParameter>
                                                                    <Image Source="Resources/x.png" Stretch="Fill" />
                                                                </Button>
                                                            </Grid>
                                                            <ComboBox Grid.Column="1" ToolTip="{Binding DefaultTarget}" Visibility="{Binding Operator, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource OperatorToTargetVisibility}}"
                                                                      Background="{Binding Target, Converter={StaticResource TargetStatusToColor},UpdateSourceTrigger=PropertyChanged}" Template="{DynamicResource OptiComboBoxControlTemplate}"
                                                                      Style="{DynamicResource OptiStructureComboBoxStyle}"  PreviewMouseWheel="ScrollViewer_PreviewMouseWheel"
                                                                   SelectedItem="{Binding Target, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center" HorizontalContentAlignment="Center" 
                                                                      VerticalContentAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center">
                                                                <ComboBox.ItemsSource>
                                                                    <MultiBinding Converter="{StaticResource AvailableStructureConverter}" UpdateSourceTrigger="PropertyChanged">
                                                                        <Binding Path="DataContext.StructureId" UpdateSourceTrigger="PropertyChanged">
                                                                            <Binding.RelativeSource>
                                                                                <RelativeSource Mode="FindAncestor" AncestorType="ListViewItem" AncestorLevel="2"/>
                                                                            </Binding.RelativeSource>
                                                                        </Binding>
                                                                        <Binding Path="DataContext.EclipseIds" ElementName="MainScriptWindow" UpdateSourceTrigger="PropertyChanged"/>
                                                                        <Binding Path="DataContext.ActiveProtocol" ElementName="MainScriptWindow" UpdateSourceTrigger="PropertyChanged"/>
                                                                        <Binding Path="DefaultTarget" UpdateSourceTrigger="PropertyChanged"/>
                                                                    </MultiBinding>
                                                                </ComboBox.ItemsSource>
                                                            </ComboBox>
                                                            <Grid Grid.Column="2" Visibility="{Binding Operator, Converter={StaticResource MarginVisibilityConverter}}">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                </Grid.ColumnDefinitions>
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition Height="Auto"/>
                                                                    <RowDefinition Height="Auto"/>
                                                                </Grid.RowDefinitions>
                                                                <Border Grid.Row="0" Width="130" Grid.Column="0" Margin="5,1,5,1" Background="LightSteelBlue" HorizontalAlignment="Center" CornerRadius="5,5,5,5">
                                                                    <TextBlock Text="Uniform / Right (mm)" HorizontalAlignment="Center" 
                                                                               ToolTip="This is used as the default for all directions which are not explicitly defined by the user. &#x0a;If this is negative, an internal margin is applied. Internal margins must be uniform."/>
                                                                </Border>
                                                                <Border Grid.Row="0" Width="60" Grid.Column="1" Margin="5,1,5,1" Background="LightSteelBlue" HorizontalAlignment="Center" CornerRadius="5,5,5,5" ToolTip="If this is not defined the uniform margin will be used">
                                                                    <TextBlock Text="Ant (mm)" HorizontalAlignment="Center" />
                                                                </Border>
                                                                <Border Grid.Row="0" Width="60" Grid.Column="2" Margin="5,1,5,1" Background="LightSteelBlue" HorizontalAlignment="Center" CornerRadius="5,5,5,5" ToolTip="If this is not defined the uniform margin will be used">
                                                                    <TextBlock Text="Inf (mm)" HorizontalAlignment="Center" />
                                                                </Border>
                                                                <Border Grid.Row="0" Width="60" Grid.Column="3" Margin="5,1,5,1" Background="LightSteelBlue" HorizontalAlignment="Center" CornerRadius="5,5,5,5" ToolTip="If this is not defined the uniform margin will be used">
                                                                    <TextBlock Text="Left (mm)" HorizontalAlignment="Center" />
                                                                </Border>
                                                                <Border Grid.Row="0" Width="60" Grid.Column="4" Margin="5,1,5,1" Background="LightSteelBlue" HorizontalAlignment="Center" CornerRadius="5,5,5,5" ToolTip="If this is not defined the uniform margin will be used">
                                                                    <TextBlock Text="Post (mm)" HorizontalAlignment="Center" />
                                                                </Border>
                                                                <Border Grid.Row="0" Width="60" Grid.Column="5" Margin="5,1,5,1"  Background="LightSteelBlue" HorizontalAlignment="Center" CornerRadius="5,5,5,5" ToolTip="If this is not defined the uniform margin will be used">
                                                                    <TextBlock Text="Sup (mm)" HorizontalAlignment="Center" />
                                                                </Border>
                                                                <TextBox Style="{StaticResource TextBoxStyle1}" Grid.Row="1" Width="50" Margin="0,2,0,0" Grid.Column="0" HorizontalAlignment="Center" HorizontalContentAlignment="Center"
                                                                         Background="{Binding operatorParameterColor, UpdateSourceTrigger=PropertyChanged}"
                                                                         Text="{Binding OperatorParameter, UpdateSourceTrigger=PropertyChanged}"   
                                                                         ToolTip="{Binding operatorParameterError, UpdateSourceTrigger=PropertyChanged}"/>
                                                                <TextBox Style="{StaticResource TextBoxStyle1}" Grid.Row="1" Width="50" Margin="0,2,0,0" Grid.Column="1" HorizontalAlignment="Center" HorizontalContentAlignment="Center" 
                                                                         Text="{Binding OperatorParameter2, UpdateSourceTrigger=PropertyChanged}"   
                                                                         Background="{Binding operatorParameter2Color, UpdateSourceTrigger=PropertyChanged}"
                                                                         IsEnabled="{Binding OperatorParameter, Converter={StaticResource isMarginInternal}, UpdateSourceTrigger=PropertyChanged}"
                                                                         ToolTip="{Binding operatorParameter2Error, UpdateSourceTrigger=PropertyChanged}"/>
                                                                <TextBox Style="{StaticResource TextBoxStyle1}" Grid.Row="1" Width="50" Margin="0,2,0,0" Grid.Column="2" HorizontalAlignment="Center" HorizontalContentAlignment="Center" 
                                                                         Text="{Binding OperatorParameter3, UpdateSourceTrigger=PropertyChanged}"   
                                                                         Background="{Binding operatorParameter3Color, UpdateSourceTrigger=PropertyChanged}"
                                                                         IsEnabled="{Binding OperatorParameter, Converter={StaticResource isMarginInternal}, UpdateSourceTrigger=PropertyChanged}"
                                                                         ToolTip="{Binding operatorParameter3Error, UpdateSourceTrigger=PropertyChanged}"/>
                                                                <TextBox Style="{StaticResource TextBoxStyle1}" Grid.Row="1" Width="50" Margin="0,2,0,0" Grid.Column="3" HorizontalAlignment="Center" HorizontalContentAlignment="Center" 
                                                                         Text="{Binding OperatorParameter4, UpdateSourceTrigger=PropertyChanged}"   
                                                                         Background="{Binding operatorParameter4Color, UpdateSourceTrigger=PropertyChanged}"
                                                                         IsEnabled="{Binding OperatorParameter, Converter={StaticResource isMarginInternal}, UpdateSourceTrigger=PropertyChanged}"
                                                                         ToolTip="{Binding operatorParameter4Error, UpdateSourceTrigger=PropertyChanged}"/>
                                                                <TextBox Style="{StaticResource TextBoxStyle1}" Grid.Row="1" Width="50" Margin="0,2,0,0" Grid.Column="4" HorizontalAlignment="Center" HorizontalContentAlignment="Center" 
                                                                         Text="{Binding OperatorParameter5, UpdateSourceTrigger=PropertyChanged}"   
                                                                         Background="{Binding operatorParameter5Color, UpdateSourceTrigger=PropertyChanged}"
                                                                         IsEnabled="{Binding OperatorParameter, Converter={StaticResource isMarginInternal}, UpdateSourceTrigger=PropertyChanged}"
                                                                         ToolTip="{Binding operatorParameter5Error, UpdateSourceTrigger=PropertyChanged}"/>
                                                                <TextBox Style="{StaticResource TextBoxStyle1}" Grid.Row="1" Width="50" Margin="0,2,0,0" Grid.Column="5" HorizontalAlignment="Center" HorizontalContentAlignment="Center" 
                                                                         Text="{Binding OperatorParameter6, UpdateSourceTrigger=PropertyChanged}"   
                                                                         Background="{Binding operatorParameter6Color, UpdateSourceTrigger=PropertyChanged}"
                                                                         IsEnabled="{Binding OperatorParameter, Converter={StaticResource isMarginInternal}, UpdateSourceTrigger=PropertyChanged}"
                                                                         ToolTip="{Binding operatorParameter6Error, UpdateSourceTrigger=PropertyChanged}"/>
                                                            </Grid>
                                                            <Grid Grid.Column="2" Visibility="{Binding Operator, Converter={StaticResource CropVisibilityConverter}}">
                                                                <StackPanel Orientation="Horizontal" Margin="2,1,2,1">
                                                                    <Border Background="LightSteelBlue" HorizontalAlignment="Center" CornerRadius="5,5,5,5">
                                                                        <StackPanel Orientation="Horizontal">
                                                                            <TextBlock Margin="10,2,2,2" VerticalAlignment="Center" Text="Additional crop margin (mm):" ToolTip="The resulting structure will be cropped back from the target by this value."/>
                                                                            <TextBox Style="{StaticResource TextBoxStyle1}" HorizontalAlignment="Center" Margin="3,2,10,2" Width="30" VerticalAlignment="Center" HorizontalContentAlignment="Center"
                                                                                     Text="{Binding OperatorParameter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                                                     ToolTip="{Binding operatorParameterError, UpdateSourceTrigger=PropertyChanged}"
                                                                                     Background="{Binding operatorParameterColor, UpdateSourceTrigger=PropertyChanged}"/>
                                                                        </StackPanel>
                                                                    </Border>
                                                                    <Border Background="LightSteelBlue" HorizontalAlignment="Center" Margin="10,0,0,0" CornerRadius="5,5,5,5">
                                                                        <StackPanel Orientation="Horizontal">
                                                                            <TextBlock Margin="10,0,2,0" VerticalAlignment="Center" Text="Internal crop:" />
                                                                            <CheckBox Style="{StaticResource CheckBoxStyle1}" HorizontalAlignment="Center" Margin="5,0,0,0" Width="20" VerticalAlignment="Center" HorizontalContentAlignment="Center" 
                                                                                      IsChecked="{Binding OperatorParameter2, Converter={StaticResource BoolToString}, Mode=TwoWay}"
                                                                                      ToolTip="Check this to crop the resulting structure toward the interior of the target.&#013;Useful when creating eval structures, e.g. with 5 mm margin from BODY."/>
                                                                        </StackPanel>
                                                                    </Border>
                                                                </StackPanel>
                                                            </Grid>
                                                        </Grid>
                                                    </DataTemplate>
                                                </ListView.ItemTemplate>
                                            </ListView>

                                        </Grid>
                                    </Grid>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>
                    </ScrollViewer>
                </Grid>
            </Grid>

        </Grid>
        <Grid Grid.Row="2" Margin="20,15,20,15" Height="45" VerticalAlignment="Center">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0">
                <ProgressBar Height="30" Margin="30,0,30,0" HorizontalAlignment="Stretch" Template="{StaticResource ProgressBarNC}" IsIndeterminate="True" 
                Visibility="{Binding Working,UpdateSourceTrigger=PropertyChanged, Converter={StaticResource VisibilityConverter}}" />
                <TextBlock Text="{Binding WaitMessage, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" HorizontalAlignment="Center" 
                           Visibility="{Binding Working,UpdateSourceTrigger=PropertyChanged, Converter={StaticResource VisibilityConverter}}" />
                <Border Grid.Column="0" Visibility="{Binding ScriptDone, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource VisibilityConverter}}" CornerRadius="7,7,7,7" Margin="30,0,30,0"
                            HorizontalAlignment="Stretch"
                            ToolTip="{Binding WarningDetails, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            BorderBrush="{Binding ScriptCompletionStatusColour}" Grid.ColumnSpan="3" BorderThickness="3">
                    <TextBlock Text="{Binding StatusMessage, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Background="Transparent"
                                   Foreground="Black"  FontSize="13" FontWeight="Bold" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                </Border>
            </Grid>
            <Grid Grid.Column="1" ToolTip="{Binding StartButtonTooltip}">
                <!--<Border Background="{Binding StartButtonColor, UpdateSourceTrigger=PropertyChanged}" CornerRadius="5,5,5,5">-->
                <Button HorizontalAlignment="Center" Style="{StaticResource ButtonStyle_Highlight}" Width="175" Command="{Binding StartCommand}" Visibility="{Binding IsErrorAcknowledged, Converter={StaticResource VisibilityConverter},UpdateSourceTrigger=PropertyChanged}"
                            IsEnabled="{Binding allInputsValid, UpdateSourceTrigger=PropertyChanged}" Margin="2,1,2,1">
                    <TextBlock Text="Generate Structures" FontSize="16" FontWeight="bold"/>
                </Button>
                <!--</Border>-->
                <Button HorizontalAlignment="Center"  Style="{DynamicResource ButtonStyle_Highlight}" Margin="2,1,2,1" Width="175" Command="{Binding ContinueCommand}" Visibility="{Binding IsErrorAcknowledged, Converter={StaticResource VisibilityInverseConverter},UpdateSourceTrigger=PropertyChanged}">
                    <TextBlock Text="Continue" FontSize="16" FontWeight="bold"/>
                </Button>
            </Grid>


        </Grid>
    </Grid>
</Window>

    